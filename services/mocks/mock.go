// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	internal "quests/internal"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user internal.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockAuthorization) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAuthorizationMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAuthorization)(nil).DeleteUser), id)
}

// GetAllUser mocks base method.
func (m *MockAuthorization) GetAllUser() []internal.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser")
	ret0, _ := ret[0].([]internal.User)
	return ret0
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockAuthorizationMockRecorder) GetAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockAuthorization)(nil).GetAllUser))
}

// GetUser mocks base method.
func (m *MockAuthorization) GetUser(username, password string) (internal.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username, password)
	ret0, _ := ret[0].(internal.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthorizationMockRecorder) GetUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthorization)(nil).GetUser), username, password)
}

// MockQuest is a mock of Quest interface.
type MockQuest struct {
	ctrl     *gomock.Controller
	recorder *MockQuestMockRecorder
}

// MockQuestMockRecorder is the mock recorder for MockQuest.
type MockQuestMockRecorder struct {
	mock *MockQuest
}

// NewMockQuest creates a new mock instance.
func NewMockQuest(ctrl *gomock.Controller) *MockQuest {
	mock := &MockQuest{ctrl: ctrl}
	mock.recorder = &MockQuestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuest) EXPECT() *MockQuestMockRecorder {
	return m.recorder
}

// CreateQuest mocks base method.
func (m *MockQuest) CreateQuest(quest internal.NewQuest) []internal.ErrorList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuest", quest)
	ret0, _ := ret[0].([]internal.ErrorList)
	return ret0
}

// CreateQuest indicates an expected call of CreateQuest.
func (mr *MockQuestMockRecorder) CreateQuest(quest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuest", reflect.TypeOf((*MockQuest)(nil).CreateQuest), quest)
}

// CreateQuestStep mocks base method.
func (m *MockQuest) CreateQuestStep(newQuestDB internal.NewQuestStepDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestStep", newQuestDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuestStep indicates an expected call of CreateQuestStep.
func (mr *MockQuestMockRecorder) CreateQuestStep(newQuestDB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestStep", reflect.TypeOf((*MockQuest)(nil).CreateQuestStep), newQuestDB)
}

// CreateQuestSteps mocks base method.
func (m *MockQuest) CreateQuestSteps(newQuestSteps internal.NewQuestSteps) []internal.ErrorList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestSteps", newQuestSteps)
	ret0, _ := ret[0].([]internal.ErrorList)
	return ret0
}

// CreateQuestSteps indicates an expected call of CreateQuestSteps.
func (mr *MockQuestMockRecorder) CreateQuestSteps(newQuestSteps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestSteps", reflect.TypeOf((*MockQuest)(nil).CreateQuestSteps), newQuestSteps)
}

// GetQuests mocks base method.
func (m *MockQuest) GetQuests() ([]internal.Quests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuests")
	ret0, _ := ret[0].([]internal.Quests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuests indicates an expected call of GetQuests.
func (mr *MockQuestMockRecorder) GetQuests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuests", reflect.TypeOf((*MockQuest)(nil).GetQuests))
}

// UpdateQuestSteps mocks base method.
func (m *MockQuest) UpdateQuestSteps(updateQuestSteps internal.UpdateQuestSteps) []internal.ErrorList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestSteps", updateQuestSteps)
	ret0, _ := ret[0].([]internal.ErrorList)
	return ret0
}

// UpdateQuestSteps indicates an expected call of UpdateQuestSteps.
func (mr *MockQuestMockRecorder) UpdateQuestSteps(updateQuestSteps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestSteps", reflect.TypeOf((*MockQuest)(nil).UpdateQuestSteps), updateQuestSteps)
}

// MockHistory is a mock of History interface.
type MockHistory struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryMockRecorder
}

// MockHistoryMockRecorder is the mock recorder for MockHistory.
type MockHistoryMockRecorder struct {
	mock *MockHistory
}

// NewMockHistory creates a new mock instance.
func NewMockHistory(ctrl *gomock.Controller) *MockHistory {
	mock := &MockHistory{ctrl: ctrl}
	mock.recorder = &MockHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistory) EXPECT() *MockHistoryMockRecorder {
	return m.recorder
}

// CompleteSteps mocks base method.
func (m *MockHistory) CompleteSteps(сompleteSteps internal.NewCompleteSteps) []internal.ErrorList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteSteps", сompleteSteps)
	ret0, _ := ret[0].([]internal.ErrorList)
	return ret0
}

// CompleteSteps indicates an expected call of CompleteSteps.
func (mr *MockHistoryMockRecorder) CompleteSteps(сompleteSteps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteSteps", reflect.TypeOf((*MockHistory)(nil).CompleteSteps), сompleteSteps)
}

// GetHistory mocks base method.
func (m *MockHistory) GetHistory(userid int) (internal.UserBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", userid)
	ret0, _ := ret[0].(internal.UserBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockHistoryMockRecorder) GetHistory(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockHistory)(nil).GetHistory), userid)
}
